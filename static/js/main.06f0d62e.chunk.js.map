{"version":3,"sources":["axios-links.js","js/components/List.jsx","js/actions/index.js","js/constants/action-types.js","js/components/Form.jsx","js/components/App.jsx","serviceWorker.js","js/reducers/index.js","js/store/index.js","index.js"],"names":["instance","axios","create","baseURL","ConnectedList","this","props","onLoadData","react_default","a","createElement","links","map","el","key","id","link","Component","List","connect","state","dispatch","get","then","res","console","log","data","fetchedLinks","push","Object","objectSpread","type","payload","catch","err","ConnectedForm","_this","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","handleChange","bind","assertThisInitialized","handleSubmit","event","setState","defineProperty","target","value","preventDefault","uuidv1","addLink","className","styles","Form","onSubmit","Form__Row","htmlFor","Input","onChange","Btn","Btn__Save","join","post","response","addLinkSuccess","error","App","Links","components_List","components_Form","Boolean","window","location","hostname","match","initialState","rootReducer","arguments","length","undefined","action","assign","concat","composeEnhancers","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","applyMiddleware","thunk","ReactDOM","render","es","js_components_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.06f0d62e.chunk.js","sourcesContent":["import axios from 'axios';\r\n\r\nconst instance = axios.create({\r\n    baseURL: 'https://react-my-burger-9062b.firebaseio.com/'\r\n});\r\n\r\nexport default instance;","import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport * as actions from '../actions/index';\r\n\r\nclass ConnectedList extends Component {\r\n    componentDidMount() {\r\n        this.props.onLoadData();\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <ul>\r\n                { this.props.links.map(el => (\r\n                    <li key={el.id}> { el.link }</li>\r\n                ))}\r\n            </ul>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        links: state.links\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n        onLoadData: () => dispatch(actions.dataLoaded())\r\n    }\r\n}\r\n\r\nconst List = connect(mapStateToProps, mapDispatchToProps)(ConnectedList);\r\n\r\nexport default List;","import { ADD_LINK, DATA_LOADED } from \"../constants/action-types\";\r\nimport axios from '../../axios-links';\r\n\r\nexport const addLinkSuccess = (payload) => {\r\n    return {\r\n        type: ADD_LINK,\r\n        payload\r\n    }\r\n}\r\n\r\nexport const addLink = (payload) => {\r\n    return dispatch => {\r\n        axios.post('links.json', payload)\r\n            .then(response => {\r\n                console.log('resp:::', response.data);\r\n                dispatch(addLinkSuccess(payload));\r\n            })\r\n            .catch(error=> {\r\n                console.log('Error:::::::', error);\r\n            })\r\n    }\r\n}\r\n\r\nexport const dataLoaddedSuccess = (payload) => {\r\n    return {\r\n        type: DATA_LOADED,\r\n        payload\r\n    }\r\n}\r\n\r\nexport const dataLoaded = () => {\r\n    return dispatch => {\r\n        axios.get('/links.json')\r\n            .then(res => {\r\n                console.log('res.data::::::::::;',res.data);\r\n                const fetchedLinks = [];\r\n                for (let key in res.data) {\r\n                    fetchedLinks.push({\r\n                        ...res.data[key],\r\n                        id: key\r\n                    });\r\n                }\r\n                dispatch(dataLoaddedSuccess(fetchedLinks));\r\n            })\r\n            .catch(err => {\r\n                console.log('Error:::::::::', err);\r\n            });\r\n    }\r\n}","export const ADD_LINK = 'ADD_LINK';\r\nexport const DATA_LOADED = 'DATA_LOADED';","import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { addLink } from \"../actions\";\r\nimport uuidv1 from 'uuid';\r\nimport styles from './Form.css';\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n        addLink: link => dispatch(addLink(link))\r\n    }\r\n}\r\n\r\nclass ConnectedForm extends Component {\r\n    constructor () {\r\n        super();\r\n        this.state = {\r\n            link: ''\r\n        }\r\n\r\n        this.handleChange = this.handleChange.bind(this);\r\n        this.handleSubmit = this.handleSubmit.bind(this);\r\n    }\r\n\r\n    handleChange(event) {\r\n        this.setState({ [event.target.id]: event.target.value });\r\n    }\r\n\r\n    handleSubmit(event) {\r\n        event.preventDefault();\r\n        const { link } = this.state;\r\n        const id = uuidv1();\r\n        this.props.addLink({link, id});\r\n        this.setState({ link: '' });\r\n    }\r\n\r\n    render() {\r\n        const { link } = this.state;\r\n\r\n        const BtnClasses = ['Btn'];\r\n\r\n        return (\r\n            <form className={styles.Form} onSubmit={this.handleSubmit}>\r\n                <div className={styles.Form__Row}>\r\n                    <label htmlFor=\"link\">Link: </label>\r\n                    <input\r\n                        className={styles.Input}\r\n                        type=\"text\"\r\n                        id=\"link\"\r\n                        value={link}\r\n                        onChange={this.handleChange}\r\n                    />\r\n                </div>\r\n                <div className={styles.Form__Row}>\r\n                    <button className={[styles.Btn, styles.Btn__Save].join(' ')} type=\"submit\">SAVE</button>\r\n                </div>\r\n            </form>\r\n        );\r\n    }\r\n}\r\n\r\nconst Form = connect(null, mapDispatchToProps)(ConnectedForm);\r\n\r\nexport default Form;","import React from 'react';\r\nimport List from './List';\r\nimport Form from './Form';\r\nimport styles from './App.css';\r\n\r\nconst App = () => (\r\n    <div className={styles.App}>\r\n        <div className={styles.Links}>\r\n            <h2>Links</h2>\r\n            <List/>\r\n        </div>\r\n        <div className={styles.Form}>\r\n            <h2>Add Link</h2>\r\n            <Form/>\r\n        </div>\r\n    </div>\r\n);\r\n\r\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import * as actionTypes from \"../constants/action-types\";\r\n\r\nconst initialState = {\r\n    links: []\r\n}\r\n\r\nconst rootReducer = (state = initialState, action) => {\r\n    switch (action.type) {\r\n        case actionTypes.ADD_LINK:\r\n            return Object.assign({}, state, {\r\n                links: state.links.concat(action.payload)\r\n            });\r\n        case actionTypes.DATA_LOADED:\r\n            return Object.assign({}, state, {\r\n                links: action.payload\r\n            });\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport default rootReducer;","import { createStore, applyMiddleware, compose } from 'redux';\r\nimport rootRedice from '../reducers/index';\r\nimport thunk from 'redux-thunk';\r\nimport rootReducer from \"../reducers/index\";\r\n\r\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\r\n\r\nconst store = createStore(rootReducer,\r\n    composeEnhancers(\r\n        applyMiddleware(thunk)\r\n    ));\r\n\r\nexport default store;","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './js/components/App';\r\nimport { BrowserRouter as Router } from \"react-router-dom\";\r\nimport * as serviceWorker from './serviceWorker';\r\nimport store from './js/store/index';\r\nimport { Provider } from 'react-redux';\r\n\r\nReactDOM.render(\r\n    <Provider store={store}>\r\n        <App/>\r\n    </Provider>, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: http://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}
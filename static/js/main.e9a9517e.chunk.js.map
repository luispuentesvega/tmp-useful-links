{"version":3,"sources":["axios-links.js","js/reducers/index.js","js/constants/action-types.js","js/midleware/index.js","js/store/index.js","js/components/List.js","js/actions/index.js","js/components/Form.js","js/components/App.js","serviceWorker.js","index.js"],"names":["instance","axios","create","baseURL","initialState","links","groups","rootReducer","state","arguments","length","undefined","action","type","updatedGroups","Object","objectSpread","link","topic","push","concat","topics","logginMiddleware","store","next","composeEnhancers","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","createStore","applyMiddleware","thunk","ConnectedList","this","props","onLoadData","buffer","index","react_default","a","createElement","className","key","map","ele","id","href","target","title","Component","List","connect","dispatch","get","then","res","_store","getState","value","fetchedGroups","gp","tmpLinks","data","fetchedLinks","dataGroupsLoaddedSuccess","catch","err","console","log","ConnectedForm","_this","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","topicSelected","options","handleChange","bind","assertThisInitialized","handleSubmit","form","React","createRef","onInitTopics","event","setState","defineProperty","preventDefault","_this$state","addLink","uuidv1","current","reportValidity","_this$state2","ref","onSubmit","htmlFor","onChange","required","el","label","autoComplete","Form","payload","post","response","addLinkSuccess","error","fetchedTopics","App","components_List","components_Form","Boolean","location","hostname","match","ReactDOM","render","es","components_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.e9a9517e.chunk.js","sourcesContent":["import axios from 'axios';\r\n\r\nconst instance = axios.create({\r\n    baseURL: 'https://react-links-1df04.firebaseio.com/'\r\n});\r\n\r\nexport default instance;","import * as actionTypes from \"../constants/action-types\";\r\n\r\nconst initialState = {\r\n    links: [],\r\n    groups: []\r\n};\r\n\r\nconst rootReducer = (state = initialState, action) => {\r\n    switch (action.type) {\r\n        case actionTypes.ADD_LINK:\r\n            let updatedGroups ={ ...state.groups };\r\n            updatedGroups[action.link.topic].push(action.link);\r\n            return {\r\n                ...state,\r\n                links: state.links.concat(action.link),\r\n                groups: updatedGroups\r\n            };\r\n        case actionTypes.DATA_LOADED:\r\n            return {\r\n                ...state,\r\n                links: action.links\r\n            };\r\n        case actionTypes.SET_TOPICS:\r\n            return {\r\n                ...state,\r\n                topics: action.topics\r\n            };\r\n        case actionTypes.DATA_GROUPS_LOADED:\r\n            return {\r\n                ...state,\r\n                groups: action.groups\r\n            };\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\nexport default rootReducer;","export const ADD_LINK = 'ADD_LINK';\r\nexport const DATA_LOADED = 'DATA_LOADED';\r\nexport const SET_TOPICS = 'SET_TOPICS';\r\nexport const DATA_GROUPS_LOADED = 'DATA_GROUPS_LOADED';","const logginMiddleware = (store) => (next) => (action) => {\r\n    next(action);\r\n}\r\n\r\nexport default logginMiddleware;","import { createStore, applyMiddleware, compose } from 'redux';\r\nimport rootRedice from '../reducers/index';\r\nimport thunk from 'redux-thunk';\r\nimport rootReducer from \"../reducers/index\";\r\nimport logginMiddleware from \"../midleware/index\";\r\n\r\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\r\n\r\nconst store = createStore(rootReducer,\r\n    composeEnhancers(\r\n        applyMiddleware(logginMiddleware,thunk)\r\n    ));\r\n\r\nexport default store;","import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport * as actions from '../actions/index';\r\nimport \"./styles/List.css\";\r\n\r\nclass ConnectedList extends Component {\r\n    componentDidMount() {\r\n        this.props.onLoadData();\r\n    }\r\n\r\n    render() {\r\n        let buffer = [];\r\n        for (let index in this.props.groups) {\r\n            const links = this.props.groups[index];\r\n            buffer.push( <li className=\"main-group\" key={index}>\r\n                <h2 className=\"main-group__title\">{ index }</h2>\r\n                <ul className=\"main-group__links\">\r\n                    { links.map(ele => (\r\n                        <li key={ele.id}><a href={ele.link} target=\"_blank\"> { ele.title ? ele.title : \"...no found\" }</a></li>\r\n                    ))}\r\n                </ul>\r\n            </li>);\r\n        }\r\n\r\n        return (\r\n            <ul className=\"main-groups\">\r\n                { buffer }\r\n            </ul>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        links: state.links,\r\n        groups: state.groups\r\n    };\r\n};\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n        onLoadData: () => dispatch(actions.dataLoaded())\r\n    }\r\n};\r\n\r\nconst List = connect(mapStateToProps, mapDispatchToProps)(ConnectedList);\r\n\r\nexport default List;","import * as actionTypes from \"../constants/action-types\";\r\nimport axios from \"../../axios-links\";\r\nimport store from '../store/index';\r\n\r\nexport const addLinkSuccess = (payload) => {\r\n    return {\r\n        type: actionTypes.ADD_LINK,\r\n        link: payload\r\n    }\r\n};\r\n\r\nexport const addLink = (payload) => {\r\n    return dispatch => {\r\n        axios.post(\"links.json\", payload)\r\n            .then(response => {\r\n                dispatch(addLinkSuccess(payload));\r\n            })\r\n            .catch(error=> {\r\n                console.log(\"Error:::::::\", error);\r\n            })\r\n    }\r\n};\r\n\r\nexport const dataLoaddedSuccess = (links) => {\r\n    return {\r\n        type: actionTypes.DATA_LOADED,\r\n        links: links\r\n    }\r\n};\r\n\r\nexport const dataGroupsLoaddedSuccess = (groups) => {\r\n    return {\r\n        type: actionTypes.DATA_GROUPS_LOADED,\r\n        groups: groups\r\n    }\r\n};\r\n\r\nexport const dataLoaded = () => {\r\n    return dispatch => {\r\n        axios.get(\"/links.json\")\r\n            .then(res => {\r\n                const _store = store.getState();\r\n\r\n                const groups = [];\r\n                for (let key in _store.topics) {\r\n                    if (key == '0') {\r\n                        continue;\r\n                    }\r\n                    groups.push(_store.topics[key].value);\r\n                }\r\n\r\n                const fetchedGroups = [];\r\n                for (let gp in groups) {\r\n                    let tmpLinks = [];\r\n                    for (let key in res.data) {\r\n                        if (res.data[key].topic != groups[gp]) {\r\n                            continue;\r\n                        }\r\n                        tmpLinks.push({\r\n                            ...res.data[key],\r\n                            id: key\r\n                        });\r\n                    }\r\n                    fetchedGroups[groups[gp]]= tmpLinks;\r\n                }\r\n                const fetchedLinks = [];\r\n                for (let key in res.data) {\r\n                    fetchedLinks.push({\r\n                        ...res.data[key],\r\n                        id: key\r\n                    });\r\n                }\r\n                dispatch(dataLoaddedSuccess(fetchedLinks));\r\n                dispatch(dataGroupsLoaddedSuccess(fetchedGroups));\r\n            })\r\n            .catch(err => {\r\n                console.log(\"Error:::::::::\", err);\r\n            });\r\n    }\r\n};\r\n\r\nexport const setTopics = (topics) => {\r\n    return {\r\n        type: actionTypes.SET_TOPICS,\r\n        topics: topics\r\n    }\r\n};\r\n\r\nexport const initTopics = () => {\r\n    return dispatch => {\r\n        axios.get(\"https://react-links-1df04.firebaseio.com/topics.json\")\r\n            .then(res => {\r\n                const fetchedTopics = [{\r\n                    value: 0,\r\n                    label: \"..Seleccione uno...\"\r\n                }];\r\n                for (let key in res.data) {\r\n                    fetchedTopics.push({\r\n                        value: key,\r\n                        label: key\r\n                    });\r\n                }\r\n                dispatch(setTopics(fetchedTopics));\r\n            })\r\n            .catch(err=> {\r\n                console.log(\"Errror: \",err);\r\n            });\r\n    }\r\n};","import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport {addLink, initTopics} from \"../actions\";\r\nimport uuidv1 from 'uuid';\r\nimport './styles/Form.css';\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n        addLink: link => dispatch(addLink(link)),\r\n        onInitTopics: () => dispatch(initTopics())\r\n    }\r\n};\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        topics: state.topics\r\n    }\r\n};\r\n\r\nclass ConnectedForm extends Component {\r\n\r\n    constructor () {\r\n        super();\r\n        this.state = {\r\n            link: \"\",\r\n            topicSelected: null,\r\n            title: \"\"\r\n        };\r\n        this.options = [];\r\n        this.handleChange = this.handleChange.bind(this);\r\n        this.handleSubmit = this.handleSubmit.bind(this);\r\n        this.form = React.createRef();\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.props.onInitTopics();\r\n    }\r\n\r\n    handleChange(event) {\r\n        this.setState({ [event.target.id]: event.target.value });\r\n    }\r\n\r\n    handleSubmit(event) {\r\n        event.preventDefault();\r\n        const { link, topicSelected, title } = this.state;\r\n\r\n        if (topicSelected === null) {\r\n            return;\r\n        }\r\n\r\n        this.props.addLink({\r\n            link: link,\r\n            topic: topicSelected,\r\n            title: title,\r\n            id: uuidv1()\r\n        });\r\n        this.setState({ link: \"\", topicSelected:\"\", title:\"\" });\r\n    }\r\n\r\n    validate() {\r\n        return this.form.current.reportValidity();\r\n    }\r\n\r\n    render() {\r\n        const { link, topic, title } = this.state;\r\n        const options = this.props.topics;\r\n\r\n        return (\r\n            <form className=\"Form\" ref={this.form} onSubmit={this.handleSubmit}>\r\n                <div className=\"Form__Row\">\r\n                    <label htmlFor=\"topicSelected\">Topic: </label>\r\n                    <select\r\n                        id=\"topicSelected\"\r\n                        value={topic}\r\n                        onChange={this.handleChange}\r\n                        required>\r\n                        { options!=undefined ?\r\n                            options.map(el => <option key={el.value}>{el.label}</option>)\r\n                        : null }\r\n                    </select>\r\n                </div>\r\n                <div className=\"Form__Row\">\r\n                    <label htmlFor=\"link\">Link: </label>\r\n                    <input\r\n                        className=\"Input\"\r\n                        type=\"text\"\r\n                        id=\"link\"\r\n                        value={link}\r\n                        onChange={this.handleChange}\r\n                        autoComplete=\"off\"\r\n                        required\r\n                    />\r\n                </div>\r\n                <div className=\"Form__Row\">\r\n                    <label htmlFor=\"title\">Title:</label>\r\n                    <input\r\n                        className=\"Input\"\r\n                        type=\"text\"\r\n                        id=\"title\"\r\n                        value={title}\r\n                        onChange={this.handleChange}\r\n                        autoComplete=\"off\"\r\n                        required\r\n                    />\r\n                </div>\r\n                <div className=\"Form__Row\">\r\n                    <button className=\"Btn Btn__Save\" type=\"submit\">SAVE</button>\r\n                </div>\r\n            </form>\r\n        );\r\n    }\r\n}\r\n\r\nconst Form = connect(mapStateToProps, mapDispatchToProps)(ConnectedForm);\r\n\r\nexport default Form;","import React from 'react';\r\nimport List from './List';\r\nimport Form from './Form';\r\nimport './styles/App.css';\r\n\r\nconst App = () => (<div className=\"app\">\r\n        <div className=\"Links\">\r\n            <h2 className=\"main-title\">Links</h2>\r\n            <List/>\r\n        </div>\r\n        <div className=\"Form\">\r\n            <h2 className=\"main-title\">Add Link</h2>\r\n            <Form/>\r\n        </div>\r\n    </div>\r\n);\r\n\r\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './js/components/App';\r\nimport { BrowserRouter as Router } from \"react-router-dom\";\r\nimport * as serviceWorker from './serviceWorker';\r\nimport store from './js/store/index';\r\nimport { Provider } from 'react-redux';\r\n\r\nReactDOM.render(\r\n    <Provider store={store}>\r\n        <App/>\r\n    </Provider>, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: http://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}